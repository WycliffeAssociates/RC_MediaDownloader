buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_ver"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:$ktlint_ver"
    }
}

plugins {
    id 'kotlin'
    id 'org.jlleitschuh.gradle.ktlint'
    id 'io.gitlab.arturbosch.detekt'
    id 'maven'
    id 'maven-publish'
}

group = 'org.wycliffeassociates'
version = '1.2.0'

repositories {
    mavenCentral()
    maven { url "https://nexus-registry.walink.org/repository/maven-public/"}
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_ver"
    implementation "org.wycliffeassociates:kotlin-resource-container:$rc_lib_ver"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_ver"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_ver"
    implementation "org.slf4j:slf4j-api:$slf4j_api_ver"
    implementation "org.slf4j:slf4j-simple:$slf4j_simple_ver"
    implementation("com.github.ajalt.clikt:clikt:3.0.0")

    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.3.3'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

task sourceJar(type: Jar) {
    archiveClassifier = "sources"
    from('src/main/kotlin') {
        include '**'
    }
}

afterEvaluate {
    publishing {
        publications {
            mavenRelease(MavenPublication) {
                from components.kotlin
                groupId = group
                artifactId = "rcmediadownloader"
                version = version
                artifact sourceJar
                pom {
                    name = "rcmediadownloader"
                    licenses {
                        license {
                            name = 'MIT License'
                            url = ' https://raw.githubusercontent.com/WycliffeAssociates/kotlin-resource-container/dev/LICENSE'
                            distribution = 'repo'
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                url = version.endsWith('SNAPSHOT') ? "${System.getenv("NEXUS_URL")}/repository/maven-snapshots/"
                        : "${System.getenv("NEXUS_URL")}/repository/maven-releases/"
                credentials {
                    username = System.getenv("NEXUS_USER")
                    password  = System.getenv("NEXUS_PASSWORD")
                }
            }
        }
    }
}